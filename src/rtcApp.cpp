//-----------------------------------------------------------------------------
// File : rtcApp.cpp
// Desc : Application.
// Copyright(c) Project Asura. All right resreved.
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <cstdio>
#include <rtcApp.h>
#include <rtcLog.h>


namespace rtc {

///////////////////////////////////////////////////////////////////////////////
// App class
///////////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
//      アプリケーションを実行します.
//-----------------------------------------------------------------------------
void App::Run(const Config& config)
{
    // タイマー開始.
    m_Timer.Start();

    // 設定を保存.
    m_Config = config;

    // 初期化.
    if (Init())
    {
        // メインループ呼び出し.
        MainLoop();
    }

    // 終了処理.
    Term();
}

//-----------------------------------------------------------------------------
//      初期化処理です.
//-----------------------------------------------------------------------------
bool App::Init()
{
    {
        DeviceDesc desc;
        if (!Device::Init(desc))
        {
            RTC_ELOG("Error : Device::Init() Failed.");
            return false;
        }
    }

    if (!OnLoad())
    {
        RTC_ELOG("Error : OnLoad() Failed.");
        return false;
    }

    return true;
}

//-----------------------------------------------------------------------------
//      終了処理です.
//-----------------------------------------------------------------------------
void App::Term()
{
    OnUnload();

    Device::Term();
}

//-----------------------------------------------------------------------------
//      メインループです.
//-----------------------------------------------------------------------------
void App::MainLoop()
{
    while(m_IsLoop)
    {
        // 現在時間を記録.
        m_Timer.End();

        // 経過時間を取得.
        auto sec = m_Timer.GetElapsedSec();

        // 制限時間を超えていたら終了.
        if (sec >= m_Config.RenderTime)
        { return; }

        // 描画処理.
        OnRender();
    }
}

//-----------------------------------------------------------------------------
//      ロード時の処理です.
//-----------------------------------------------------------------------------
bool App::OnLoad()
{

    return true;
}

//-----------------------------------------------------------------------------
//      解放時の処理です.
//-----------------------------------------------------------------------------
void App::OnUnload()
{
}

//-----------------------------------------------------------------------------
//      描画時の処理です.
//-----------------------------------------------------------------------------
void App::OnRender()
{
}

} // namespace rtc
